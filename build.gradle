plugins {
    id 'net.minecrell.licenser' version '0.4.1' apply false
}
apply plugin: 'java'
def recallVersion = file('version.txt').text.trim()
group = 'com.aitusoftware'

defaultTasks ('check')

ext {
    fullName = 'Recall'
    fullDescription = 'Recall: An off-heap garbage-free object store'
    teamName = 'Aitu Software Limited'
    siteUrl = 'https://github.com/aitusoftware/recall'
    sourceUrl = 'https://github.com/aitusoftware/recall.git'

    javaCompilerExecutable = System.env['JAVA_HOME'] ? System.env['JAVA_HOME'] + '/bin/javac' : 'javac'
    if (!project.hasProperty('sonatypeUrl')) sonatypeUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
    if (!project.hasProperty('sonatypeUsername')) sonatypeUsername = ''
    if (!project.hasProperty('sonatypePassword')) sonatypePassword = ''
}

def projectPom = {
    name = fullName
    description = fullDescription
    url = siteUrl
    packaging = 'pom'

    scm {
        url = "$sourceUrl"
        connection = "scm:git:https://github.com/aitusoftware.com/recall.git"
        developerConnection = "scm:git:https://github.com/aitusoftware.com/recall.git"
    }

    licenses {
        license {
            name = 'The Apache Software License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution = 'repo'
        }
    }

    developers {
        developer {
            id = 'epickrram'
            name = 'Mark Price'
            email = 'recall@aitusoftware.com'
        }
    }
}


subprojects {
    repositories {
        mavenCentral()
        jcenter()
    }

    group = 'com.aitusoftware'

    jar {
        baseName = project.name

        manifest.attributes('Built-By': System.properties['user.name'],
                'Bundle-Name': fullName,
                'Bundle-Vendor': teamName,
                'Bundle-Description': fullDescription,
                'Bundle-DocURL': siteUrl)
    }
}

subprojects {
    version = recallVersion

    apply plugin: 'java-library'
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'signing'
    apply plugin: 'maven'
    apply plugin: 'net.minecrell.licenser'

    test {
        useJUnitPlatform()
    }

    dependencies {
        checkstyle 'com.puppycrawl.tools:checkstyle:8.40'
        testCompile 'com.google.truth:truth:1.0.1'
        testCompile 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testCompile 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    }

    checkstyle {
        configFile = new File(project.rootDir, 'config/checkstyle.xml')
        toolVersion = '8.36.2'
    }

    license {
        header = new File(rootDir, 'config/header.txt')
        newLine = false
        exclude '**/sbe/example/**'
    }
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    artifacts {
        archives sourcesJar, javadocJar
    }

    javadoc {
    }

    signing {
        required { gradle.taskGraph.hasTask('uploadArchives') }
        sign configurations.archives
    }
}



project(':recall-store') {
    dependencies {
        compile "org.agrona:agrona:1.7.2"
    }

    uploadArchives {
        repositories.mavenDeployer {
            beforeDeployment { deployment -> signing.signPom(deployment) }

            repository(url: sonatypeUrl) {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project(projectPom)
        }
    }
}

project(':recall-sbe') {
    dependencies {
        compile "uk.co.real-logic:sbe-all:1.20.2"
        compile project(':recall-store')
        compile "org.agrona:agrona:1.7.2"
    }

    File generatedSrcDir = file("${buildDir}/generated-sources/java")

    sourceSets {
        test.java.srcDir generatedSrcDir
    }

    compileTestJava.dependsOn('generateSbeFiles')
    
    task generateSbeFiles(type: JavaExec) {
        main 'uk.co.real_logic.sbe.SbeTool'
        classpath sourceSets.main.runtimeClasspath
        jvmArgs = ["-Dsbe.output.dir=${generatedSrcDir.getAbsolutePath()}", '-Dsbe.generate.ir=true', '-Dsbe.java.generate.interfaces=true']
        args "${project.projectDir}/src/test/resources/sbe-schema.xml"
    }

    uploadArchives {
        repositories.mavenDeployer {
            beforeDeployment { deployment -> signing.signPom(deployment) }

            repository(url: sonatypeUrl) {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project(projectPom)
        }
    }

}

/*
project(':recall-annotations') {

}
*/
